{"version":3,"sources":["serviceWorker.js","Components/Card/Card.js","Components/CardList/CardList.js","Components/SearchBox/SearchBox.js","Components/Scroll/Scroll.js","Components/ErrorBoundry/ErrorBoundry.js","containers/App/App.js","Actions/actions.js","Constants/constants.js","Reducers/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","email","name","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","fetch","then","response","json","users","onSearchChange","filterdRobots","filter","robot","toLowerCase","includes","toLocaleLowerCase","length","connect","dispatch","event","payload","target","value","initialState","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,G,MAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,KAAKC,EAAQ,EAARA,GAEtB,OACI,yBAAKC,UAAW,uDACZ,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAOD,GACP,2BAAID,OCaLM,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACAC,IAAKJ,EAAOG,GAAOR,GACnBA,GAAIK,EAAOG,GAAOR,GAClBD,KAAMM,EAAOG,GAAOT,KACpBD,MAAOO,EAAOG,GAAOV,aCE9BY,EAdG,SAAC,GAAiC,EAA/BC,YAAgC,IAApBC,EAAmB,EAAnBA,aAE7B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,oCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCiBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAM,CACPC,UAAU,GAHA,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,mDAEJG,KAAKX,MAAMK,a,GAhBCQ,a,OCmBrBC,E,kDACF,aAAe,IAAD,8BACV,gBACKP,MAAQ,CACTnB,OAAQ,IAHF,E,gEAOM,IAAD,OAEf2B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKP,SAAS,CAACxB,OAAQ+B,S,+BAGjC,IACE/B,EAAWuB,KAAKJ,MAAhBnB,OADH,EAEmCuB,KAAKX,MAArCN,EAFH,EAEGA,YAAa0B,EAFhB,EAEgBA,eACfC,EAAgBjC,EAAOkC,QAAO,SAAAC,GAChC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS/B,EAAYgC,wBAEzD,OAAKtC,EAAOuC,OAIJ,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcyB,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUhC,OAAQiC,OAR3B,2C,GAtBDR,aAsCHe,eAlDS,SAACrB,GACrB,MAAM,CACFb,YAAaa,EAAMb,gBAIA,SAACmC,GACxB,MAAO,CACHT,eAAgB,SAACU,GAAD,OAAWD,ECdK,CACpCjC,KCJ8B,sBDK9BmC,QDYuDD,EAAME,OAAOC,YA0CzDL,CAA+Cd,G,eGzDxDoB,EAAe,CACjBxC,YAAa,ICQXyC,EAAQC,aDLc,WAAwC,IAAvC7B,EAAsC,uDAA9B2B,EAAcG,EAAgB,uDAAP,GACxD,OAAQA,EAAOzC,MACX,IDR0B,sBCStB,OAAO0C,OAAOC,OAAO,GAAIhC,EAAO,CAAEb,YAAa2C,EAAON,UAC1D,QACI,OAAOxB,MCCnBiC,IAASC,OACO,kBAAC,IAAD,CAAUN,MAAQA,GACd,kBAAC,EAAD,OAEJO,SAASC,eAAe,SVmHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.72dac1d4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({email,name,id}) => {\r\n    \r\n    return (\r\n        <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw3 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2  >{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './../Card/Card';\r\nconst CardList = ({ robots }) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, index) => {\r\n                    return (\r\n                        <Card\r\n                        key={robots[index].id}\r\n                        id={robots[index].id}\r\n                        name={robots[index].name}\r\n                        email={robots[index].email}\r\n                    />);\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField,searchChange }) => {\r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue '\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1> there is an error </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport CardList from '../../Components/CardList/CardList';\r\nimport SearchBox from '../../Components/SearchBox/SearchBox';\r\nimport Scroll from '../../Components/Scroll/Scroll'\r\nimport ErrorBoundry from './../../Components/ErrorBoundry/ErrorBoundry';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField } from './../../Actions/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        searchField: state.searchField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: []\r\n        };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        \r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({robots: users})})\r\n    }\r\n\r\n    render() {\r\n        const { robots } = this.state;\r\n        const { searchField, onSearchChange } = this.props;\r\n        const filterdRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLocaleLowerCase())\r\n        })\r\n        if (!robots.length) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filterdRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps )(App)","import {CHANGE_SEARCH_FIELD} from './../Constants/constants'\r\n\r\n\r\nexport const setSearchField =(text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})","export const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD'","import { CHANGE_SEARCH_FIELD } from './../Constants/constants'\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App/App';\nimport './index.css'\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport { searchRobots } from './Reducers/reducers'\n\n\nconst store = createStore( searchRobots )\nReactDOM.render(\n                <Provider store= {store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}